최단경로 알고리즘: 가장 짧은 경로를 찾는 알고리즘
 ex) 한 지점에서 다른 한 지점까지의 최단 경로
     한 지점에서 다른 모든지점까지의 최단 경로
     모든 지점에서 다른 모든 지점까지의 최단 경로

 각 지점은 그래프에서 노드로 표현
 지점 간 연결된 도로는 그래프에서 간선으로 표현

1. 다익스트로 알고리즘
 특정한 노드에서 출발하여 다른 모든 노드로 가는 최단경로를 계산
 음의 간선이 없을 때 정상적으로 작동
  - 현실세계의 도로(간선)은 음의 간선으로 표현되지 않습니다
 그리디 알고리즘으로 분류된다
  - 매 상황에서 가장 비용이 적은 노드를 선택해 임의의 과정을 반복합니다

다익스트로 알고리즘의 동작 과정
 1. 출발 노드를 설정
 2. 최단 거리 테이블을 초기화
 3. 방문하지 않은 노드중에서 최단거리가 가장 짧은 노드를 선택 (이부분 때문에 그리디 알고리즘으로 분류)
 4. 해당 노드를 거쳐 다른 노드로 가는 비용을 계산하여 최단 거리 테이블을 갱신
 5. 3~4번 과정을 반복

 처음에는 출발 노드에서 다른 노드까지의 거리를 무한으로 설정하고 최단거리를 찾을때마다 갱신해준다

다익스트라 알고리즘의 특징
 그리디 알고리즘: 매 상황에서 방문하지 않은 가장 비용이 저긍 노드를 선택해 임의의 과정을 반복
 단계를 거치며 한 번 처리된 노드의 최단거리는 고정되어 더 이상 바뀌지않는다(한 단계당 하나의 노드에 대한 최단 거리를 확실히 찾는다)
 수행후 테이블에 각 노드까지의 최단 거리를 저장

다익스트라 알고리즘의 성능
 총 o(v)번에 걸쳐서 최단 거리가 가장 짧ㅅ은 노드를 매번 선형 탐색해야함
 전체 시간복잡도는 o(v²)
 코딩테스트 최단 경로 문제에서 노드 개수가 500개 이하라면 문제 해결 가능

우선순위 큐(Priority Queue)
 우선순위가 가장 높은 데이터를 가장 먼저 삭제하는 자료구조
 여러개의 물건 데이터를 자료구조에 넣었다가 가치가 높은 물건 데이터부터 꺼내서 확인해야하는 경우에 우선순위 큐를 이용할수있다
 Python, C++, Java를 포함한 대부분의 프로그래밍 언어에서 표준 라이브러리 혀앹로 지원

 자료구조       추출되는 데이터
 스택(Stack)   가장 나중에 삽인된 데이터
 큐(Queue)     가장 먼저 삽입된 데이터
 우선순위 큐    가장 우선순위가 높은 데이터


힙(Heap)
 우선순위 큐를 구현하기 위해 사용하는 자료구조중 하나
 최소 힙(Min Heap)과 최대 힙(Max Heap)이 있다
 다양한 알고리즘에서 사용

 우선순위 큐 구현 방식       삽입 시간       삭제 시간
 리스트                    o(1)          o(N)
 힙(Heap)                 o(logN)       o(logN)


플로이드 워셜 알고리즘
 용도: 모든 지점에서 다른 모든 지점까지의 최단 경로를 모두 구해야 하는 경우




