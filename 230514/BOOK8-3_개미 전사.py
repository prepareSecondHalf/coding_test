# 개미 전사는 메뚜기 마을의 식량창고를 몰래 공격하려고 한다.
# 여러 개의 식량 창고는 일직선으로 이어져 있고, 각 창고에는 정해진 수의 식량이 있다.
# 개미 전사는 이를 선택적으로 약탈할 것이며, 메뚜기 정찰병들은 인접한 식량창고가 공격받으면 알 수 있다.
# 따라서 들키지 않으려면 최소 한 칸 이상 떨어진 창고를 약탈해야 한다.
# 식량창고 N개의 정보가 주어질 때, 얻을 수 있는 식량의 최댓값을 구하기

# 첫째 줄에 식량 창고의 개수 N이 주어진다. (3 <= N <= 100)
# 둘째 줄에 각 식량 창고에 저장된 식량의 개수 K가 공백으로 구분되어 주어진다. (0 <= K <= 1000)

# 첫째 줄에 식량의 최댓값을 출력하시오

import sys
n = int(sys.stdin.readline())
k = list(map(int, sys.stdin.readline().split()))

# 풀이
# 털 때 얻을 수 있는 식량의 합을 구해서 dp table에 저장해 두면 된다.

dp = [0] * n # 각 창고를 털었을 때 식량의 총 합의 최댓값

dp[0] = k[0] # 첫 번째 창고 털면 리스트의 첫 번째 값만큼 가져옴
dp[1] = max(k[0], k[1]) # 두 번째 창고 털기 vs 첫 번째 창고 털기 더 큰 값 가져옴

# 세 번째부터 최댓값 구해서 저장
for i in range(2, n):
    # 현재 창고 + 전전 창고까지의 최댓값이 많은지, 이전 창고까지의 최댓값이 많은지 비교해서 최댓값 입력
    dp[i] = max(k[i] + dp[i-2], dp[i-1])
print(dp[n-1]) # index로 계산했으므로 n-1