# 정수 X가 주어질 때 이에 대해 사용할 수 있는 연산은 다음 4가지이다.
# 1. X가 5로 나누어 떨어지면 5로 나눈다.
# 2. X가 3으로 나누어 떨어지면 3으로 나눈다.
# 3. X가 2로 나누어 떨어지면 2로 나눈다.
# 4. X에서 1을 뺀다.
# 이를 이용해 X로 1을 만들려고 할 때,연산을 사용하는 횟수의 최솟값을 출력하시오.

# 첫째 줄에 정수 X가 주어진다. (1 <= X <= 30000)
# 첫째 줄에 연산 횟수를 출력한다.

import sys
x = int(sys.stdin.readline().strip())

# 풀이
# 큰 수의 최소 연산 횟수를 구하는 방법은 작은 수의 최소 연산 횟수를 구하는 방법의 재귀란다
# 따라서 1부터 x + 1까지 구해 나가면 된다.
# 이 때, 앞서 구한 작은 수의 결과는 dp table에 저장해 두면 그대로 가져다 사용할 수 있단다.

dp = [0] * (x + 1) # dp table 초기화

for i in range(2, x+1): # 초기값 dp[1]은 1이므로 2부터 시작
    dp[i] = dp[i-1] + 1 # 현재 수에서 1을 뺄 때(현재 수보다 1 작은 친구보다 한 번 더 연산하므로 +1)

    if i % 2 == 0: # 현재 수를 2로 나눌 때(1을 뺐을 때랑 비교해서 더 작은 걸로)
        dp[i] = min(dp[i], dp[i//2]+1)

    if i % 3 == 0: # 현재 수를 3으로 나눌 때(2로 나눴을 때랑 비교해서 더 작은 걸로)
        dp[i] = min(dp[i], dp[i//3]+1)

    if i % 5 == 0: # 현재 수를 5로 나눌 때(3으로 나눴을 때랑 비교해서 더 작은 걸로)
        dp[i] = min(dp[i], dp[i//5]+1)
    # print('dp[', i, '] is', dp[i])
print(dp[x])